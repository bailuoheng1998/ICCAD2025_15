 | Step | Expert | Submodule | Description | Verilog Code | Testbench Code | Verification |
|------|--------|-----------|-------------|--------------|----------------|--------------|
| 1    | Expert 1 | Data Latch | Create a register to temporarily store the first 8-bit data input. | ```verilog
module data_latch (
    input clk,
    input rst_n,
    input data_in,
    output reg [7:0] data_out
);
always @(posedge clk or negedge rst_n) begin
    if (!rst_n)
        data_out <= 8'b0;
    else
        data_out <= data_in;
end
endmodule
``` | ```verilog
module data_latch_tb;
reg clk, rst_n, data_in;
wire [7:0] data_out;

data_latch dut (clk, rst_n, data_in, data_out);

initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    rst_n = 0; data_in = 8'hAA; #10;
    rst_n = 1; #10;
    data_in = 8'h55; #10;
    $finish;
end
endmodule
``` | Verify that the data latch holds the input data correctly until reset. |
| 2    | Expert 2 | Data Concatenation | Create logic to concatenate the two 8-bit inputs and generate valid_out and data_out signals. | ```verilog
module width_8to16 (
    input clk,
    input rst_n,
    input valid_in,
    input [7:0] data_in,
    output reg valid_out,
    output reg [15:0] data_out
);
reg [7:0] data_latch;
always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        data_latch <= 8'b0;
        valid_out <= 0;
        data_out <= 16'b0;
    end else if (valid_in) begin
        data_latch <= data_in;
        valid_out <= 1;
        data_out <= {data_latch, data_in};
    end else begin
        valid_out <= 0;
    end
end
endmodule
``` | ```verilog
module width_8to16_tb;
reg clk, rst_n, valid_in;
reg [7:0] data_in;
wire valid_out;
wire [15:0] data_out;

width_8to16 dut (clk, rst_n, valid_in, data_in, valid_out, data_out);

initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    rst_n = 0; valid_in = 0; data_in = 8'h0; #10;
    rst_n = 1; #10;
    valid_in = 1; data_in = 8'hAA; #10;
    valid_in = 1; data_in = 8'h55; #10;
    valid_in = 0; #10;
    $finish;
end
endmodule
``` | Verify that the module correctly concatenates two 8-bit inputs and generates valid_out and data_out signals. |
| 3    | Expert 3 | Synchronization | Ensure that the input signals are synchronized with the clock and reset signals. | ```verilog
module sync (
    input clk,
    input rst_n,
    input valid_in,
    output reg sync_valid_in
);
reg sync_valid_in_d1;
always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        sync_valid_in_d1 <= 0;
        sync_valid_in <= 0;
    end else begin
        sync_valid_in_d1 <= valid_in;
        sync_valid_in <= sync_valid_in_d1;
    end
end
endmodule
``` | ```verilog
module sync_tb;
reg clk, rst_n, valid_in;
wire sync_valid_in;

sync dut (clk, rst_n, valid_in, sync_valid_in);

initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    rst_n = 0; valid_in = 0; #10;
    rst_n = 1; #10;
    valid_in = 1; #10;
    valid_in = 0; #10;
    $finish;
end
endmodule
``` | Verify that the input signals are synchronized with the clock and reset signals. |

Final Complete Verilog Code:
```verilog
module data_latch (
    input clk,
    input rst_n,
    input [7:0] data_in,
    output reg [7:0] data_out
);
always @(posedge clk or negedge rst_n) begin
    if (!rst_n)
        data_out <= 8'b0;
    else
        data_out <= data_in;
end
endmodule

module width_8to16 (
    input clk,
    input rst_n,
    input valid_in,
    input [7:0] data_in,
    output reg valid_out,
    output reg [15:0] data_out
);
reg [7:0] data_latch;
sync sync_inst (clk, rst_n, valid_in, sync_valid_in);
data_latch data_latch_inst (clk, rst_n, data_in, data_latch);

always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        data_latch <= 8'b0;
        valid_out <= 0;
        data_out <= 16'b0;
    end else if (sync_valid_in) begin
        data_latch <= data_in;
        valid_out <= 1;
        data_out <= {data_latch, data_in};
    end else begin
        valid_out <= 0;
    end
end
endmodule

module sync (
    input clk,
    input rst_n,
    input valid_in,
    output reg sync_valid_in
);
reg sync_valid_in_d1;
always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        sync_valid_in_d1 <= 0;
        sync_valid_in <= 0;
    end else begin
        sync_valid_in_d1 <= valid_in;
        sync_valid_in <= sync_valid_in_d1;
    end
end
endmodule
```