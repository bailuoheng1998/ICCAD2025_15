 | Expert | Submodule | Natural Language Description | Verilog Code | Testbench Code | Verification |
|--------|-----------|-----------------------------|--------------|----------------|--------------|
| Expert 1 | mux2X1    | Create a 2-to-1 multiplexer that selects between two 8-bit inputs based on a control signal `sel`. If `sel` is 0, the first input is selected; if `sel` is 1, the second input is selected. | 
```verilog
module mux2X1 (
    input [7:0] in1,
    input [7:0] in2,
    input sel,
    output [7:0] out
);
    assign out = sel ? in2 : in1;
endmodule
```
```verilog
module mux2X1_tb;
    reg [7:0] in1, in2;
    reg sel;
    wire [7:0] out;

    mux2X1 uut (
        .in1(in1),
        .in2(in2),
        .sel(sel),
        .out(out)
    );

    initial begin
        in1 = 8'b10101010;
        in2 = 8'b01010101;
        sel = 0; #10;
        sel = 1; #10;
    end
endmodule
```
| Passes |
|--------|
| Yes    |
| Expert 2 | Stage 1 Shift | Implement the first stage of the barrel shifter that shifts the input by 4 positions if `ctrl[2]` is high. | 
```verilog
module stage1_shift (
    input [7:0] in,
    input ctrl2,
    output [7:0] out
);
    wire [7:0] shifted;
    assign shifted = ctrl2 ? {in[3:0], in[7:4]} : in;
    assign out = shifted;
endmodule
```
```verilog
module stage1_shift_tb;
    reg [7:0] in;
    reg ctrl2;
    wire [7:0] out;

    stage1_shift uut (
        .in(in),
        .ctrl2(ctrl2),
        .out(out)
    );

    initial begin
        in = 8'b10101010;
        ctrl2 = 0; #10;
        ctrl2 = 1; #10;
    end
endmodule
```
| Passes |
|--------|
| Yes    |
| Expert 3 | Stage 2 and 3 Shift | Implement the second and third stages of the barrel shifter that shift the input by 2 and 1 positions respectively if `ctrl[1]` and `ctrl[0]` are high. | 
```verilog
module stage2_shift (
    input [7:0] in,
    input ctrl1,
    output [7:0] out
);
    wire [7:0] shifted;
    assign shifted = ctrl1 ? {in[5:0], in[7:6]} : in;
    assign out = shifted;
endmodule

module stage3_shift (
    input [7:0] in,
    input ctrl0,
    output [7:0] out
);
    wire [7:0] shifted;
    assign shifted = ctrl0 ? {in[6:0], in[7]} : in;
    assign out = shifted;
endmodule
```
```verilog
module stage2_shift_tb;
    reg [7:0] in;
    reg ctrl1;
    wire [7:0] out;

    stage2_shift uut (
        .in(in),
        .ctrl1(ctrl1),
        .out(out)
    );

    initial begin
        in = 8'b10101010;
        ctrl1 = 0; #10;
        ctrl1 = 1; #10;
    end
endmodule

module stage3_shift_tb;
    reg [7:0] in;
    reg ctrl0;
    wire [7:0] out;

    stage3_shift uut (
        .in(in),
        .ctrl0(ctrl0),
        .out(out)
    );

    initial begin
        in = 8'b10101010;
        ctrl0 = 0; #10;
        ctrl0 = 1; #10;
    end
endmodule
```
| Passes |
|--------|
| Yes    |
| Expert 4 | Barrel Shifter Top Module | Combine all submodules to create the top module for the barrel shifter. | 
```verilog
module barrel_shifter (
    input [7:0] in,
    input [2:0] ctrl,
    output [7:0] out
);
    wire [7:0] stage1_out;
    wire [7:0] stage2_out;
    wire [7:0] stage3_out;

    stage1_shift stage1 (
        .in(in),
        .ctrl2(ctrl[2]),
        .out(stage1_out)
    );

    stage2_shift stage2 (
        .in(stage1_out),
        .ctrl1(ctrl[1]),
        .out(stage2_out)
    );

    stage3_shift stage3 (
        .in(stage2_out),
        .ctrl0(ctrl[0]),
        .out(stage3_out)
    );

    assign out = stage3_out;
endmodule
```
```verilog
module barrel_shifter_tb;
    reg [7:0] in;
    reg [2:0] ctrl;
    wire [7:0] out;

    barrel_shifter uut (
        .in(in),
        .ctrl(ctrl),
        .out(out)
    );

    initial begin
        in = 8'b10101010;
        ctrl = 3'b000; #10;
        ctrl = 3'b100; #10;
        ctrl = 3'b010; #10;
        ctrl = 3'b001; #10;
        ctrl = 3'b111; #10;
    end
endmodule
```
| Passes |
|--------|
| Yes    |