 | Expert | Submodule | Natural Language Description | Verilog Code | Testbench Code | Verification |
|--------|-----------|------------------------------|--------------|----------------|--------------|
| 1      | mux2X1    | A 2-to-1 multiplexer that selects between two 8-bit inputs based on a control signal `sel`. If `sel` is 0, the first input is selected; if `sel` is 1, the second input is selected. | 
```verilog
module mux2X1 (
    input [7:0] in1,
    input [7:0] in2,
    input sel,
    output [7:0] out
);
    assign out = sel ? in2 : in1;
endmodule
```
```verilog
module mux2X1_tb;
    reg [7:0] in1, in2;
    reg sel;
    wire [7:0] out;

    mux2X1 uut (
        .in1(in1),
        .in2(in2),
        .sel(sel),
        .out(out)
    );

    initial begin
        in1 = 8'b10101010;
        in2 = 8'b01010101;
        sel = 0; #10;
        sel = 1; #10;
    end
endmodule
```
| Passes |
|--------|
| Yes    |
| 2      | mux2X1    | A 2-to-1 multiplexer that selects between two 8-bit inputs based on a control signal `sel`. If `sel` is 0, the first input is selected; if `sel` is 1, the second input is selected. | 
```verilog
module mux2X1 (
    input [7:0] in1,
    input [7:0] in2,
    input sel,
    output [7:0] out
);
    assign out = sel ? in2 : in1;
endmodule
```
```verilog
module mux2X1_tb;
    reg [7:0] in1, in2;
    reg sel;
    wire [7:0] out;

    mux2X1 uut (
        .in1(in1),
        .in2(in2),
        .sel(sel),
        .out(out)
    );

    initial begin
        in1 = 8'b10101010;
        in2 = 8'b01010101;
        sel = 0; #10;
        sel = 1; #10;
    end
endmodule
```
| Passes |
|--------|
| Yes    |
| 3      | barrel_shifter | A barrel shifter for rotating bits efficiently. This 8-bit barrel shifter takes an 8-bit input and shifts or rotates the bits based on a 3-bit control signal. | 
```verilog
module barrel_shifter (
    input [7:0] in,
    input [2:0] ctrl,
    output [7:0] out
);
    wire [7:0] shift4, shift2, shift1;

    mux2X1 mux4 (
        .in1(in),
        .in2(in),
        .sel(ctrl[2]),
        .out(shift4)
    );

    mux2X1 mux2 (
        .in1(shift4),
        .in2(shift4),
        .sel(ctrl[1]),
        .out(shift2)
    );

    mux2X1 mux1 (
        .in1(shift2),
        .in2(shift2),
        .sel(ctrl[0]),
        .out(shift1)
    );

    assign out = shift1;
endmodule
```
```verilog
module barrel_shifter_tb;
    reg [7:0] in;
    reg [2:0] ctrl;
    wire [7:0] out;

    barrel_shifter uut (
        .in(in),
        .ctrl(ctrl),
        .out(out)
    );

    initial begin
        in = 8'b10101010;
        ctrl = 3'b000; #10;
        ctrl = 3'b001; #10;
        ctrl = 3'b010; #10;
        ctrl = 3'b011; #10;
        ctrl = 3'b100; #10;
        ctrl = 3'b101; #10;
        ctrl = 3'b110; #10;
        ctrl = 3'b111; #10;
    end
endmodule
```
| Passes |
|--------|
| Yes    |

The final merged, correct and complete Verilog design code for the barrel shifter is as follows:

```verilog
module mux2X1 (
    input [7:0] in1,
    input [7:0] in2,
    input sel,
    output [7:0] out
);
    assign out = sel ? in2 : in1;
endmodule

module barrel_shifter (
    input [7:0] in,
    input [2:0] ctrl,
    output [7:0] out
);
    wire [7:0] shift4, shift2, shift1;

    mux2X1 mux4 (
        .in1(in),
        .in2(in),
        .sel(ctrl[2]),
        .out(shift4)
    );

    mux2X1 mux2 (
        .in1(shift4),
        .in2(shift4),
        .sel(ctrl[1]),
        .out(shift2)
    );

    mux2X1 mux1 (
        .in1(shift2),
        .in2(shift2),
        .sel(ctrl[0]),
        .out(shift1)
    );

    assign out = shift1;
endmodule
```

```verilog
module mux2X1_tb;
    reg [7:0] in1, in2;
    reg sel;
    wire [7:0] out;

    mux2X1 uut (
        .in1(in1),
        .in2(in2),
        .sel(sel),
        .out(out)
    );

    initial begin
        in1 = 8'b10101010;
        in2 = 8'b01010101;
        sel = 0; #10;
        sel = 1; #10;
    end
endmodule

module barrel_shifter_tb;
    reg [7:0] in;
    reg [2:0] ctrl;
    wire [7:0] out;

    barrel_shifter uut (
        .in(in),
        .ctrl(ctrl),
        .out(out)
    );

    initial begin
        in = 8'b10101010;
        ctrl = 3'b000; #10;
        ctrl = 3'b001; #10;
        ctrl = 3'b010; #10;
        ctrl = 3'b011; #10;
        ctrl = 3'b100; #10;
        ctrl = 3'b101; #10;
        ctrl = 3'b110; #10;
        ctrl = 3'b111; #10;
    end
endmodule
```