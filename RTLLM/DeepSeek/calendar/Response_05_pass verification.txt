 | Expert | Submodule | Description | Verilog Code | Testbench Code | Verification |
|--------|-----------|-------------|--------------|----------------|--------------|
| Expert 1 | Seconds Counter | This module counts seconds from 0 to 59 and resets to 0 when it reaches 59. | 
```verilog
module seconds_counter (
    input wire CLK,
    input wire RST,
    output reg [5:0] Secs
);
    always @(posedge CLK or posedge RST) begin
        if (RST) begin
            Secs <= 6'b000000;
        end else if (Secs == 6'd59) begin
            Secs <= 6'b000000;
        end else begin
            Secs <= Secs + 1;
        end
    end
endmodule
```
```verilog
module seconds_counter_tb;
    reg CLK;
    reg RST;
    wire [5:0] Secs;

    seconds_counter uut (
        .CLK(CLK),
        .RST(RST),
        .Secs(Secs)
    );

    initial begin
        CLK = 0;
        forever #5 CLK = ~CLK;
    end

    initial begin
        RST = 1; #10;
        RST = 0;
        #120;
        $finish;
    end
endmodule
```
| The testbench initializes the reset signal, then deasserts it after 10 time units. The seconds counter should increment from 0 to 59 and wrap around to 0. |
| Expert 2 | Minutes Counter | This module counts minutes from 0 to 59, incrementing when seconds reach 59. | 
```verilog
module minutes_counter (
    input wire CLK,
    input wire RST,
    input wire [5:0] Secs,
    output reg [5:0] Mins
);
    always @(posedge CLK or posedge RST) begin
        if (RST) begin
            Mins <= 6'b000000;
        end else if (Secs == 6'd59 && Mins == 6'd59) begin
            Mins <= 6'b000000;
        end else if (Secs == 6'd59) begin
            Mins <= Mins + 1;
        end
    end
endmodule
```
```verilog
module minutes_counter_tb;
    reg CLK;
    reg RST;
    reg [5:0] Secs;
    wire [5:0] Mins;

    minutes_counter uut (
        .CLK(CLK),
        .RST(RST),
        .Secs(Secs),
        .Mins(Mins)
    );

    initial begin
        CLK = 0;
        forever #5 CLK = ~CLK;
    end

    initial begin
        RST = 1; Secs = 0; #10;
        RST = 0;
        #120;
        $finish;
    end
endmodule
```
| The testbench initializes the reset signal, then deasserts it after 10 time units. The minutes counter should increment from 0 to 59 when seconds reach 59, wrapping around to 0 when both seconds and minutes are 59. |
| Expert 3 | Hours Counter | This module counts hours from 0 to 23, incrementing when minutes and seconds reach 59. | 
```verilog
module hours_counter (
    input wire CLK,
    input wire RST,
    input wire [5:0] Secs,
    input wire [5:0] Mins,
    output reg [5:0] Hours
);
    always @(posedge CLK or posedge RST) begin
        if (RST) begin
            Hours <= 6'b000000;
        end else if (Secs == 6'd59 && Mins == 6'd59 && Hours == 6'd23) begin
            Hours <= 6'b000000;
        end else if (Secs == 6'd59 && Mins == 6'd59) begin
            Hours <= Hours + 1;
        end
    end
endmodule
```
```verilog
module hours_counter_tb;
    reg CLK;
    reg RST;
    reg [5:0] Secs;
    reg [5:0] Mins;
    wire [5:0] Hours;

    hours_counter uut (
        .CLK(CLK),
        .RST(RST),
        .Secs(Secs),
        .Mins(Mins),
        .Hours(Hours)
    );

    initial begin
        CLK = 0;
        forever #5 CLK = ~CLK;
    end

    initial begin
        RST = 1; Secs = 0; Mins = 0; #10;
        RST = 0;
        #120;
        $finish;
    end
endmodule
```
| The testbench initializes the reset signal, then deasserts it after 10 time units. The hours counter should increment from 0 to 23 when both seconds and minutes are 59, wrapping around to 0 when hours, minutes, and seconds are all at their maximum. |

Final Complete Verilog Code:
```verilog
module calendar (
    input wire CLK,
    input wire RST,
    output reg [5:0] Hours,
    output reg [5:0] Mins,
    output reg [5:0] Secs
);
    always @(posedge CLK or posedge RST) begin
        if (RST) begin
            Secs <= 6'b000000;
            Mins <= 6'b000000;
            Hours <= 6'b000000;
        end else if (Secs == 6'd59) begin
            if (Mins == 6'd59) begin
                if (Hours == 6'd23) begin
                    Hours <= 6'b000000;
                end else begin
                    Hours <= Hours + 1;
                end
                Mins <= 6'b000000;
            end else begin
                Mins <= Mins + 1;
            end
            Secs <= 6'b000000;
        end else begin
            Secs <= Secs + 1;
        end
    end
endmodule
```
This code merges the individual submodules into a single calendar module, ensuring that all three counters work together as described.