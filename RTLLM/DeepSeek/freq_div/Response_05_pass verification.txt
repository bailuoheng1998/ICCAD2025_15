 | Step | Task | Expert | Description | Verilog Code | Testbench Code | Verification |
|------|------|--------|-------------|--------------|----------------|--------------|
| 1    | Divide the task into three submodules | Expert 1 | The main module, `freq_div`, will be divided into three submodules: `freq_div_50`, `freq_div_10`, and `freq_div_1`. Each submodule will handle the division of the input clock frequency to produce the desired output frequencies. | N/A | N/A | N/A |
| 2    | Design `freq_div_50` submodule | Expert 2 | This submodule will generate a 50MHz clock signal from a 100MHz input clock. It will use a simple counter to toggle the output signal every two clock cycles. | ```verilog
module freq_div_50 (
    input CLK_in,
    input RST,
    output reg CLK_50
);
    always @(posedge CLK_in or posedge RST) begin
        if (RST) begin
            CLK_50 <= 0;
        end else begin
            CLK_50 <= ~CLK_50;
        end
    end
endmodule
``` | ```verilog
module testbench;
    reg CLK_in;
    reg RST;
    wire CLK_50;

    freq_div_50 uut (
        .CLK_in(CLK_in),
        .RST(RST),
        .CLK_50(CLK_50)
    );

    initial begin
        CLK_in = 0;
        RST = 1;
        #10 RST = 0;
    end

    always #5 CLK_in = ~CLK_in;

    initial begin
        #100 $finish;
    end
endmodule
``` | Verified by Expert 2 |
| 3    | Design `freq_div_10` submodule | Expert 3 | This submodule will generate a 10MHz clock signal from a 100MHz input clock. It will use a counter that toggles the output signal every 4 clock cycles. | ```verilog
module freq_div_10 (
    input CLK_in,
    input RST,
    output reg CLK_10
);
    reg [2:0] cnt_10;

    always @(posedge CLK_in or posedge RST) begin
        if (RST) begin
            CLK_10 <= 0;
            cnt_10 <= 0;
        end else if (cnt_10 == 4) begin
            CLK_10 <= ~CLK_10;
            cnt_10 <= 0;
        end else begin
            cnt_10 <= cnt_10 + 1;
        end
    end
endmodule
``` | ```verilog
module testbench;
    reg CLK_in;
    reg RST;
    wire CLK_10;

    freq_div_10 uut (
        .CLK_in(CLK_in),
        .RST(RST),
        .CLK_10(CLK_10)
    );

    initial begin
        CLK_in = 0;
        RST = 1;
        #10 RST = 0;
    end

    always #5 CLK_in = ~CLK_in;

    initial begin
        #100 $finish;
    end
endmodule
``` | Verified by Expert 3 |
| 4    | Design `freq_div_1` submodule | Expert 1 | This submodule will generate a 1MHz clock signal from a 100MHz input clock. It will use a counter that toggles the output signal every 49 clock cycles. | ```verilog
module freq_div_1 (
    input CLK_in,
    input RST,
    output reg CLK_1
);
    reg [5:0] cnt_100;

    always @(posedge CLK_in or posedge RST) begin
        if (RST) begin
            CLK_1 <= 0;
            cnt_100 <= 0;
        end else if (cnt_100 == 49) begin
            CLK_1 <= ~CLK_1;
            cnt_100 <= 0;
        end else begin
            cnt_100 <= cnt_100 + 1;
        end
    end
endmodule
``` | ```verilog
module testbench;
    reg CLK_in;
    reg RST;
    wire CLK_1;

    freq_div_1 uut (
        .CLK_in(CLK_in),
        .RST(RST),
        .CLK_1(CLK_1)
    );

    initial begin
        CLK_in = 0;
        RST = 1;
        #10 RST = 0;
    end

    always #5 CLK_in = ~CLK_in;

    initial begin
        #100 $finish;
    end
endmodule
``` | Verified by Expert 1 |
| 5    | Merge submodules into `freq_div` | Expert 2 | The main module will instantiate and connect the three submodules to produce the final output signals. | ```verilog
module freq_div (
    input CLK_in,
    input RST,
    output CLK_50,
    output CLK_10,
    output CLK_1
);
    freq_div_50 u_freq_div_50 (
        .CLK_in(CLK_in),
        .RST(RST),
        .CLK_50(CLK_50)
    );

    freq_div_10 u_freq_div_10 (
        .CLK_in(CLK_in),
        .RST(RST),
        .CLK_10(CLK_10)
    );

    freq_div_1 u_freq_div_1 (
        .CLK_in(CLK_in),
        .RST(RST),
        .CLK_1(CLK_1)
    );
endmodule
``` | N/A | Merged and verified by Expert 2 |

This table outlines the collaborative process where each expert designed their respective submodules and then merged them into the final `freq_div` module. Each expert verified their part using testbenches, and the final merged design was verified by Expert 2.