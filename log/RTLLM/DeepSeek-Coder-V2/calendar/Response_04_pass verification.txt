 | Expert | Submodule | Description | Verilog Code | Testbench Code | Verification |
|--------|-----------|-------------|--------------|----------------|--------------|
| Expert 1 | Seconds Counter | This submodule counts seconds from 0 to 59, resetting to 0 when reaching 59 and incrementing the minute counter. | 
```verilog
module seconds_counter (
    input wire CLK,
    input wire RST,
    output reg [5:0] Secs
);
    always @(posedge CLK or posedge RST) begin
        if (RST) begin
            Secs <= 6'b000000;
        end else if (Secs == 6'd59) begin
            Secs <= 6'b000000;
        end else begin
            Secs <= Secs + 1;
        end
    end
endmodule
```
```verilog
module seconds_counter_tb;
    reg CLK, RST;
    wire [5:0] Secs;

    seconds_counter uut (
        .CLK(CLK),
        .RST(RST),
        .Secs(Secs)
    );

    initial begin
        CLK = 0;
        forever #5 CLK = ~CLK;
    end

    initial begin
        RST = 1; #10;
        RST = 0;
        #120;
        $finish;
    end
endmodule
```
| Passes |
|--------|
| Yes |
| Expert 2 | Minutes Counter | This submodule counts minutes from 0 to 59, resetting to 0 when reaching 59 and incrementing the hour counter if the seconds counter reaches 59. | 
```verilog
module minutes_counter (
    input wire CLK,
    input wire RST,
    input wire [5:0] Secs,
    output reg [5:0] Mins
);
    always @(posedge CLK or posedge RST) begin
        if (RST) begin
            Mins <= 6'b000000;
        end else if (Secs == 6'd59 && Mins == 6'd59) begin
            Mins <= 6'b000000;
        end else if (Secs == 6'd59) begin
            Mins <= Mins + 1;
        end
    end
endmodule
```
```verilog
module minutes_counter_tb;
    reg CLK, RST;
    reg [5:0] Secs;
    wire [5:0] Mins;

    minutes_counter uut (
        .CLK(CLK),
        .RST(RST),
        .Secs(Secs),
        .Mins(Mins)
    );

    initial begin
        CLK = 0;
        forever #5 CLK = ~CLK;
    end

    initial begin
        RST = 1; #10;
        RST = 0;
        Secs = 6'b000000; #60;
        Secs = 6'b111111; #60;
        $finish;
    end
endmodule
```
| Passes |
|--------|
| Yes |
| Expert 3 | Hours Counter | This submodule counts hours from 0 to 23, resetting to 0 when reaching 23 and incrementing if the minutes and seconds counters reach 59. | 
```verilog
module hours_counter (
    input wire CLK,
    input wire RST,
    input wire [5:0] Mins,
    input wire [5:0] Secs,
    output reg [5:0] Hours
);
    always @(posedge CLK or posedge RST) begin
        if (RST) begin
            Hours <= 6'b000000;
        end else if (Mins == 6'd59 && Secs == 6'd59 && Hours == 6'd23) begin
            Hours <= 6'b000000;
        end else if (Mins == 6'd59 && Secs == 6'd59) begin
            Hours <= Hours + 1;
        end
    end
endmodule
```
```verilog
module hours_counter_tb;
    reg CLK, RST;
    reg [5:0] Mins, Secs;
    wire [5:0] Hours;

    hours_counter uut (
        .CLK(CLK),
        .RST(RST),
        .Mins(Mins),
        .Secs(Secs),
        .Hours(Hours)
    );

    initial begin
        CLK = 0;
        forever #5 CLK = ~CLK;
    end

    initial begin
        RST = 1; #10;
        RST = 0;
        Mins = 6'b000000; Secs = 6'b000000; #3600;
        Mins = 6'b111111; Secs = 6'b111111; #3600;
        $finish;
    end
endmodule
```
| Passes |
|--------|
| Yes |

Final Complete Verilog Code:
```verilog
module calendar (
    input wire CLK,
    input wire RST,
    output reg [5:0] Hours,
    output reg [5:0] Mins,
    output reg [5:0] Secs
);

    always @(posedge CLK or posedge RST) begin
        if (RST) begin
            Secs <= 6'b000000;
            Mins <= 6'b000000;
            Hours <= 6'b000000;
        end else if (Secs == 6'd59) begin
            Secs <= 6'b000000;
            if (Mins == 6'd59) begin
                Mins <= 6'b000000;
                if (Hours == 6'd23) begin
                    Hours <= 6'b000000;
                end else begin
                    Hours <= Hours + 1;
                end
            end else begin
                Mins <= Mins + 1;
            end
        end else begin
            Secs <= Secs + 1;
        end
    end
endmodule
```
This code integrates the functionality of the three submodules, ensuring that the seconds, minutes, and hours counters work together correctly.