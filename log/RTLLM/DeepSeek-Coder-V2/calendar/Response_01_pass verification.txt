 | Step | Expert 1 | Expert 2 | Expert 3 |
|------|----------|----------|----------|
| Step 1: Divide the task into three submodules |  |  |  |
| Submodule 1: Seconds Counter |  |  |  |
| Submodule 2: Minutes Counter |  |  |  |
| Submodule 3: Hours Counter |  |  |  |
| Step 2: Each expert will design their submodule |  |  |  |
| Submodule 1: Seconds Counter |  |  |  |
| Description: This submodule counts seconds from 0 to 59. When it reaches 59, it resets to 0 and increments the minute counter. |  |  |  |
| Verilog Code: 
```verilog
module SecondsCounter (
    input CLK,
    input RST,
    output reg [5:0] Secs
);
    always @(posedge CLK or posedge RST) begin
        if (RST) begin
            Secs <= 6'b000000;
        end else if (Secs == 6'd59) begin
            Secs <= 6'b000000;
        end else begin
            Secs <= Secs + 1;
        end
    end
endmodule
```
Testbench Code:
```verilog
module SecondsCounter_tb;
    reg CLK, RST;
    wire [5:0] Secs;

    SecondsCounter uut (
        .CLK(CLK),
        .RST(RST),
        .Secs(Secs)
    );

    initial begin
        CLK = 0;
        forever #5 CLK = ~CLK;
    end

    initial begin
        RST = 1; #10;
        RST = 0;
        #120;
        $finish;
    end
endmodule
```
|  |  |  |  |
| Submodule 2: Minutes Counter |  |  |  |
| Description: This submodule counts minutes from 0 to 59. When it reaches 59, it resets to 0 and increments the hour counter. |  |  |  |
| Verilog Code: 
```verilog
module MinutesCounter (
    input CLK,
    input RST,
    input [5:0] Secs,
    output reg [5:0] Mins
);
    always @(posedge CLK or posedge RST) begin
        if (RST) begin
            Mins <= 6'b000000;
        end else if (Secs == 6'd59 && Mins == 6'd59) begin
            Mins <= 6'b000000;
        end else if (Secs == 6'd59) begin
            Mins <= Mins + 1;
        end
    end
endmodule
```
Testbench Code:
```verilog
module MinutesCounter_tb;
    reg CLK, RST;
    reg [5:0] Secs;
    wire [5:0] Mins;

    MinutesCounter uut (
        .CLK(CLK),
        .RST(RST),
        .Secs(Secs),
        .Mins(Mins)
    );

    initial begin
        CLK = 0;
        forever #5 CLK = ~CLK;
    end

    initial begin
        RST = 1; #10;
        RST = 0;
        Secs = 6'd59; #10;
        Secs = 6'd0; #10;
        Secs = 6'd59; #10;
        Secs = 6'd59; #10;
        $finish;
    end
endmodule
```
|  |  |  |  |
| Submodule 3: Hours Counter |  |  |  |
| Description: This submodule counts hours from 0 to 23. When it reaches 23, it resets to 0. |  |  |  |
| Verilog Code: 
```verilog
module HoursCounter (
    input CLK,
    input RST,
    input [5:0] Mins,
    input [5:0] Secs,
    output reg [5:0] Hours
);
    always @(posedge CLK or posedge RST) begin
        if (RST) begin
            Hours <= 6'b000000;
        end else if (Secs == 6'd59 && Mins == 6'd59 && Hours == 6'd23) begin
            Hours <= 6'b000000;
        end else if (Secs == 6'd59 && Mins == 6'd59) begin
            Hours <= Hours + 1;
        end
    end
endmodule
```
Testbench Code:
```verilog
module HoursCounter_tb;
    reg CLK, RST;
    reg [5:0] Mins, Secs;
    wire [5:0] Hours;

    HoursCounter uut (
        .CLK(CLK),
        .RST(RST),
        .Mins(Mins),
        .Secs(Secs),
        .Hours(Hours)
    );

    initial begin
        CLK = 0;
        forever #5 CLK = ~CLK;
    end

    initial begin
        RST = 1; #10;
        RST = 0;
        Secs = 6'd59; Mins = 6'd59; #10;
        Secs = 6'd0; Mins = 6'd0; #10;
        Secs = 6'd59; Mins = 6'd59; #10;
        Secs = 6'd59; Mins = 6'd59; #10;
        $finish;
    end
endmodule
```
| Step 3: Experts merge the final working submodules into a complete design |  |  |  |
| Final Complete Verilog Code: 
```verilog
module Calendar (
    input CLK,
    input RST,
    output [5:0] Hours,
    output [5:0] Mins,
    output [5:0] Secs
);
    wire [5:0] next_Secs;
    wire [5:0] next_Mins;
    wire [5:0] next_Hours;

    SecondsCounter SecondsCounter (
        .CLK(CLK),
        .RST(RST),
        .Secs(next_Secs)
    );

    MinutesCounter MinutesCounter (
        .CLK(CLK),
        .RST(RST),
        .Secs(next_Secs),
        .Mins(next_Mins)
    );

    HoursCounter HoursCounter (
        .CLK(CLK),
        .RST(RST),
        .Secs(next_Secs),
        .Mins(next_Mins),
        .Hours(next_Hours)
    );

    assign Secs = (RST) ? 6'b000000 : next_Secs;
    assign Mins = (RST) ? 6'b000000 : next_Mins;
    assign Hours = (RST) ? 6'b000000 : next_Hours;
endmodule
```
| Step 4: Provide me with the final complete Verilog code. |  |  |  |