 | Expert | Submodule | Description | Verilog Code | Testbench Code | Verification |
|--------|-----------|-------------|--------------|----------------|--------------|
| Expert 1 | Seconds Update | This submodule updates the seconds every clock cycle. If the seconds reach 59, it resets to 0 and increments the minutes. | ```verilog
module seconds_update(
    input CLK,
    input RST,
    output reg [5:0] Secs
);
always @(posedge CLK or posedge RST) begin
    if (RST) begin
        Secs <= 6'b000000;
    end else if (Secs == 6'd59) begin
        Secs <= 6'b000000;
    end else begin
        Secs <= Secs + 1;
    end
end
endmodule
```
| ```verilog
module seconds_update_tb;
    reg CLK, RST;
    wire [5:0] Secs;
    seconds_update uut (
        .CLK(CLK),
        .RST(RST),
        .Secs(Secs)
    );
    initial begin
        CLK = 0;
        forever #5 CLK = ~CLK;
    end
    initial begin
        RST = 1; #10;
        RST = 0;
        #120;
        $finish;
    end
endmodule
```
| Testbench verifies that seconds reset to 0 and increment correctly. |
| Expert 2 | Minutes Update | This submodule updates the minutes every clock cycle. If the minutes reach 59 and the seconds are also 59, it resets to 0 and increments the hours. | ```verilog
module minutes_update(
    input CLK,
    input RST,
    input [5:0] Secs,
    output reg [5:0] Mins
);
always @(posedge CLK or posedge RST) begin
    if (RST) begin
        Mins <= 6'b000000;
    end else if (Secs == 6'd59 && Mins == 6'd59) begin
        Mins <= 6'b000000;
    end else if (Secs == 6'd59) begin
        Mins <= Mins + 1;
    end
end
endmodule
```
| ```verilog
module minutes_update_tb;
    reg CLK, RST;
    reg [5:0] Secs;
    wire [5:0] Mins;
    minutes_update uut (
        .CLK(CLK),
        .RST(RST),
        .Secs(Secs),
        .Mins(Mins)
    );
    seconds_update seconds_uut (
        .CLK(CLK),
        .RST(RST),
        .Secs(Secs)
    );
    initial begin
        CLK = 0;
        forever #5 CLK = ~CLK;
    end
    initial begin
        RST = 1; #10;
        RST = 0;
        #120;
        $finish;
    end
endmodule
```
| Testbench verifies that minutes reset to 0 and increment correctly when seconds reach 59. |
| Expert 3 | Hours Update | This submodule updates the hours every clock cycle. If the hours reach 23, the minutes and seconds are also 59, it resets to 0. | ```verilog
module hours_update(
    input CLK,
    input RST,
    input [5:0] Mins,
    input [5:0] Secs,
    output reg [5:0] Hours
);
always @(posedge CLK or posedge RST) begin
    if (RST) begin
        Hours <= 6'b000000;
    end else if (Mins == 6'd59 && Secs == 6'd59 && Hours == 6'd23) begin
        Hours <= 6'b000000;
    end else if (Mins == 6'd59 && Secs == 6'd59) begin
        Hours <= Hours + 1;
    end
end
endmodule
```
| ```verilog
module hours_update_tb;
    reg CLK, RST;
    reg [5:0] Mins, Secs;
    wire [5:0] Hours;
    hours_update uut (
        .CLK(CLK),
        .RST(RST),
        .Mins(Mins),
        .Secs(Secs),
        .Hours(Hours)
    );
    minutes_update minutes_uut (
        .CLK(CLK),
        .RST(RST),
        .Secs(Secs),
        .Mins(Mins)
    );
    seconds_update seconds_uut (
        .CLK(CLK),
        .RST(RST),
        .Secs(Secs)
    );
    initial begin
        CLK = 0;
        forever #5 CLK = ~CLK;
    end
    initial begin
        RST = 1; #10;
        RST = 0;
        #120;
        $finish;
    end
endmodule
```
| Testbench verifies that hours reset to 0 and increment correctly when minutes and seconds reach 59. |

Final Complete Verilog Code:
```verilog
module calendar(
    input CLK,
    input RST,
    output reg [5:0] Hours,
    output reg [5:0] Mins,
    output reg [5:0] Secs
);
always @(posedge CLK or posedge RST) begin
    if (RST) begin
        Secs <= 6'b000000;
        Mins <= 6'b000000;
        Hours <= 6'b000000;
    end else if (Secs == 6'd59) begin
        Secs <= 6'b000000;
        if (Mins == 6'd59) begin
            Mins <= 6'b000000;
            if (Hours == 6'd23) begin
                Hours <= 6'b000000;
            end else begin
                Hours <= Hours + 1;
            end
        end else begin
            Mins <= Mins + 1;
        end
    end else begin
        Secs <= Secs + 1;
    end
end
endmodule
```

This final code integrates the functionality of all three submodules, ensuring that the seconds, minutes, and hours are updated correctly based on the clock and reset signals.