Step	Expert Role	Task Description	Verilog Code	Testbench Code	Verification
1	Expert 1	FSM State Design: Expert 1 will design the finite state machine (FSM) for the sequence detector, including states such as IDLE, S1, S2, S3, and S4. Transitions are based on the data_in signal.	verilog module fsm_sequence_detector( input clk, input rst_n, input data_in, output reg sequence_detected ); reg [2:0] state, next_state; parameter IDLE = 3'b000, S1 = 3'b001, S2 = 3'b010, S3 = 3'b011, S4 = 3'b100; always @(posedge clk or negedge rst_n) begin if (~rst_n) state <= IDLE; else state <= next_state; end always @(*) begin case (state) IDLE: next_state = (data_in == 1'b1) ? S1 : IDLE; S1: next_state = (data_in == 1'b0) ? S2 : IDLE; S2: next_state = (data_in == 1'b0) ? S3 : IDLE; S3: next_state = (data_in == 1'b1) ? S4 : IDLE; S4: next_state = IDLE; default: next_state = IDLE; endcase end always @(posedge clk or negedge rst_n) begin if (~rst_n) sequence_detected <= 0; else if (state == S4) sequence_detected <= 1; else sequence_detected <= 0; end endmodule	verilog module tb_fsm_sequence_detector(); reg clk, rst_n, data_in; wire sequence_detected; fsm_sequence_detector uut( .clk(clk), .rst_n(rst_n), .data_in(data_in), .sequence_detected(sequence_detected) ); initial begin clk = 0; rst_n = 0; data_in = 0; #5 rst_n = 1; #5 data_in = 1; #5 data_in = 0; #5 data_in = 0; #5 data_in = 1; #5 data_in = 1; #5 data_in = 0; #5 data_in = 1; end always #5 clk = ~clk; initial begin $monitor("time=%0d rst_n=%b data_in=%b sequence_detected=%b", $time, rst_n, data_in, sequence_detected); end endmodule	Verification: This module verifies the state machine by checking the state transitions and the assertion of sequence_detected. The testbench should pass the sequence "1001".
2	Expert 2	Clock and Reset Management: Expert 2 will design the clock and reset management, ensuring that rst_n is properly handled, and the FSM resets as expected.	verilog module clock_reset_manager( input clk, input rst_n, output clk_out, output rst_out ); assign clk_out = clk; assign rst_out = rst_n; endmodule	verilog module tb_clock_reset_manager(); reg clk, rst_n; wire clk_out, rst_out; clock_reset_manager uut( .clk(clk), .rst_n(rst_n), .clk_out(clk_out), .rst_out(rst_out) ); initial begin clk = 0; rst_n = 0; #5 rst_n = 1; #5 rst_n = 0; #5 rst_n = 1; end always #5 clk = ~clk; endmodule	Verification: Ensures that the reset functionality works as expected. Testbench verifies the transitions of the reset signal.
3	Expert 3	Input Data Handling: Expert 3 designs the data_in input logic to simulate different binary sequences for the FSM.	verilog module data_input_handler( input clk, input rst_n, output reg data_in ); always @(posedge clk or negedge rst_n) begin if (~rst_n) data_in <= 0; else data_in <= $random; end endmodule	verilog module tb_data_input_handler(); reg clk, rst_n; wire data_in; data_input_handler uut( .clk(clk), .rst_n(rst_n), .data_in(data_in) ); initial begin clk = 0; rst_n = 0; #5 rst_n = 1; end always #5 clk = ~clk; initial begin $monitor("time=%0d rst_n=%b data_in=%b", $time, rst_n, data_in); end endmodule	Verification: Simulates a random sequence of data_in. Ensures data is being input as expected.
4	Expert 4	Integration and Merging: Expert 4 will integrate all modules designed by the previous experts. They will ensure that the FSM, clock/reset logic, and input data handling work together seamlessly.	verilog module sequence_detector( input clk, input rst_n, input data_in, output sequence_detected ); wire clk_out, rst_out; clock_reset_manager u1( .clk(clk), .rst_n(rst_n), .clk_out(clk_out), .rst_out(rst_out) ); fsm_sequence_detector u2( .clk(clk_out), .rst_n(rst_out), .data_in(data_in), .sequence_detected(sequence_detected) ); endmodule	verilog module tb_sequence_detector(); reg clk, rst_n, data_in; wire sequence_detected; sequence_detector uut( .clk(clk), .rst_n(rst_n), .data_in(data_in), .sequence_detected(sequence_detected) ); initial begin clk = 0; rst_n = 0; data_in = 0; #5 rst_n = 1; #5 data_in = 1; #5 data_in = 0; #5 data_in = 0; #5 data_in = 1; #5 data_in = 1; #5 data_in = 0; #5 data_in = 1; end always #5 clk = ~clk; initial begin $monitor("time=%0d rst_n=%b data_in=%b sequence_detected=%b", $time, rst_n, data_in, sequence_detected); end endmodule	Verification: This final integration module and testbench ensure that all submodules interact correctly and that the sequence "1001" is detected as expected.
Final Complete Verilog Code:
verilog

module clock_reset_manager( input clk, input rst_n, output clk_out, output rst_out );
  assign clk_out = clk;
  assign rst_out = rst_n;
endmodule

module fsm_sequence_detector(
  input clk,
  input rst_n,
  input data_in,
  output reg sequence_detected
);
  reg [2:0] state, next_state;
  parameter IDLE = 3'b000, S1 = 3'b001, S2 = 3'b010, S3 = 3'b011, S4 = 3'b100;

  always @(posedge clk or negedge rst_n) begin
    if (~rst_n) state <= IDLE;
    else state <= next_state;
  end

  always @(*) begin
    case (state)
      IDLE: next_state = (data_in == 1'b1) ? S1 : IDLE;
      S1: next_state = (data_in == 1'b0) ? S2 : IDLE;
      S2: next_state = (data_in == 1'b0) ? S3 : IDLE;
      S3: next_state = (data_in == 1'b1) ? S4 : IDLE;
      S4: next_state = IDLE;
      default: next_state = IDLE;
    endcase
  end

  always @(posedge clk or negedge rst_n) begin
    if (~rst_n) sequence_detected <= 0;
    else if (state == S4) sequence_detected <= 1;
    else sequence_detected <= 0;
  end
endmodule

module data_input_handler(
  input clk,
  input rst_n,
  output reg data_in
);
  always @(posedge clk or negedge rst_n) begin
    if (~rst_n) data_in <= 0;
    else data_in <= $random;
  end
endmodule

module sequence_detector(
  input clk,
  input rst_n,
  input data_in,
  output sequence_detected
);
  wire clk_out, rst_out;
  clock_reset_manager u1( .clk(clk), .rst_n(rst_n), .clk_out(clk_out), .rst_out(rst_out) );
  fsm_sequence_detector u2( .clk(clk_out), .rst_n(rst_out), .data_in(data_in), .sequence_detected(sequence_detected) );
endmodule
Testbench for Final Design:
verilog

module tb_sequence_detector();
  reg clk, rst_n, data_in;
  wire sequence_detected;

  sequence_detector uut(
    .clk(clk),
    .rst_n(rst_n),
    .data_in(data_in),
    .sequence_detected(sequence_detected)
  );

  initial begin
    clk = 0; rst_n = 0; data_in = 0;
    #5 rst_n = 1;
    #5 data_in = 1;
    #5 data_in = 0;
    #5 data_in = 0;
    #5 data_in = 1;
    #5 data_in = 1;
    #5 data_in = 0;
    #5 data_in = 1;
  end

  always #5 clk = ~clk;

  initial begin
    $monitor("time=%0d rst_n=%b data_in=%b sequence_detected=%b", $time, rst_n, data_in, sequence_detected);
  end
endmodule