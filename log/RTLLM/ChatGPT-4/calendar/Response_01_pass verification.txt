
To solve the problem of creating a Verilog design for a perpetual calendar, we will break it down into several logical submodules, each designed by a different expert. The key submodules involve the handling of seconds, minutes, and hours, which will be modularized for clarity and correctness.

Experts and Submodules
Expert	Submodule Description	Verilog Code (Submodule)	Testbench Code
Expert 1	Seconds Counter: Handles the counting of seconds, loops from 0 to 59. When 59, resets to 0.	verilog module sec_counter (input CLK, input RST, output reg [5:0] Secs); always @(posedge CLK or posedge RST) begin if (RST) Secs <= 6'd0; else if (Secs == 6'd59) Secs <= 6'd0; else Secs <= Secs + 1; end endmodule	verilog module tb_sec_counter; reg CLK, RST; wire [5:0] Secs; sec_counter uut (.CLK(CLK), .RST(RST), .Secs(Secs)); initial begin CLK = 0; RST = 0; #5 RST = 1; #5 RST = 0; forever #5 CLK = ~CLK; end initial begin #100 $finish; end endmodule
Expert 2	Minutes Counter: Handles counting minutes. Increments when seconds reach 59. Resets when 59 minutes.	verilog module min_counter (input CLK, input RST, input [5:0] Secs, output reg [5:0] Mins); always @(posedge CLK or posedge RST) begin if (RST) Mins <= 6'd0; else if (Secs == 6'd59 && Mins == 6'd59) Mins <= 6'd0; else if (Secs == 6'd59) Mins <= Mins + 1; end endmodule	verilog module tb_min_counter; reg CLK, RST; reg [5:0] Secs; wire [5:0] Mins; min_counter uut (.CLK(CLK), .RST(RST), .Secs(Secs), .Mins(Mins)); initial begin CLK = 0; RST = 0; Secs = 6'd0; #5 RST = 1; #5 RST = 0; forever #5 CLK = ~CLK; end initial begin #100 Secs = 6'd59; #50 Secs = 6'd0; #100 $finish; end endmodule
Expert 3	Hours Counter: Handles counting hours. Increments when both minutes and seconds reach 59.	verilog module hour_counter (input CLK, input RST, input [5:0] Secs, input [5:0] Mins, output reg [5:0] Hours); always @(posedge CLK or posedge RST) begin if (RST) Hours <= 6'd0; else if (Secs == 6'd59 && Mins == 6'd59 && Hours == 6'd23) Hours <= 6'd0; else if (Secs == 6'd59 && Mins == 6'd59) Hours <= Hours + 1; end endmodule	verilog module tb_hour_counter; reg CLK, RST; reg [5:0] Secs, Mins; wire [5:0] Hours; hour_counter uut (.CLK(CLK), .RST(RST), .Secs(Secs), .Mins(Mins), .Hours(Hours)); initial begin CLK = 0; RST = 0; Secs = 6'd0; Mins = 6'd0; #5 RST = 1; #5 RST = 0; forever #5 CLK = ~CLK; end initial begin #100 Secs = 6'd59; Mins = 6'd59; #50 Secs = 6'd0; Mins = 6'd0; #100 $finish; end endmodule
Expert 4	Top-Level Calendar Module: Integrates the seconds, minutes, and hours modules into one cohesive design.	verilog module calendar (input CLK, input RST, output [5:0] Hours, output [5:0] Mins, output [5:0] Secs); wire [5:0] sec_out, min_out; sec_counter sec_uut (.CLK(CLK), .RST(RST), .Secs(sec_out)); min_counter min_uut (.CLK(CLK), .RST(RST), .Secs(sec_out), .Mins(min_out)); hour_counter hour_uut (.CLK(CLK), .RST(RST), .Secs(sec_out), .Mins(min_out), .Hours(Hours)); assign Secs = sec_out; assign Mins = min_out; endmodule	verilog module tb_calendar; reg CLK, RST; wire [5:0] Hours, Mins, Secs; calendar uut (.CLK(CLK), .RST(RST), .Hours(Hours), .Mins(Mins), .Secs(Secs)); initial begin CLK = 0; RST = 0; #5 RST = 1; #5 RST = 0; forever #5 CLK = ~CLK; end initial begin #100 $finish; end endmodule
Final Integrated Verilog Code
verilog

module sec_counter (
    input CLK, 
    input RST, 
    output reg [5:0] Secs
);
    always @(posedge CLK or posedge RST) begin
        if (RST)
            Secs <= 6'd0;
        else if (Secs == 6'd59)
            Secs <= 6'd0;
        else
            Secs <= Secs + 1;
    end
endmodule

module min_counter (
    input CLK, 
    input RST, 
    input [5:0] Secs, 
    output reg [5:0] Mins
);
    always @(posedge CLK or posedge RST) begin
        if (RST)
            Mins <= 6'd0;
        else if (Secs == 6'd59 && Mins == 6'd59)
            Mins <= 6'd0;
        else if (Secs == 6'd59)
            Mins <= Mins + 1;
    end
endmodule

module hour_counter (
    input CLK, 
    input RST, 
    input [5:0] Secs, 
    input [5:0] Mins, 
    output reg [5:0] Hours
);
    always @(posedge CLK or posedge RST) begin
        if (RST)
            Hours <= 6'd0;
        else if (Secs == 6'd59 && Mins == 6'd59 && Hours == 6'd23)
            Hours <= 6'd0;
        else if (Secs == 6'd59 && Mins == 6'd59)
            Hours <= Hours + 1;
    end
endmodule

module calendar (
    input CLK, 
    input RST, 
    output [5:0] Hours, 
    output [5:0] Mins, 
    output [5:0] Secs
);
    wire [5:0] sec_out, min_out;
    
    sec_counter sec_uut (.CLK(CLK), .RST(RST), .Secs(sec_out));
    min_counter min_uut (.CLK(CLK), .RST(RST), .Secs(sec_out), .Mins(min_out));
    hour_counter hour_uut (.CLK(CLK), .RST(RST), .Secs(sec_out), .Mins(min_out), .Hours(Hours));

    assign Secs = sec_out;
    assign Mins = min_out;
endmodule
This integrated design combines the individual submodules into one complete working module that accurately tracks the perpetual calendar, counting seconds, minutes, and hours in a cyclical manner.