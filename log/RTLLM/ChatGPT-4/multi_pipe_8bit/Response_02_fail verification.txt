Sure! To tackle this question effectively, we will break down the design into several submodules. Below is a step-by-step description of each submodule, followed by the Verilog code and corresponding testbenches. The final integration will merge all submodules into a complete and correct Verilog design.

Step 1: Submodule Design Breakdown
Submodule	Description
Input Control Submodule	This submodule handles the mul_en_in signal, storing it in a register mul_en_out_reg on the positive clock edge. It also provides the mul_en_out signal.
Input Register Submodule	Stores the multiplicand (mul_a) and multiplier (mul_b) in registers mul_a_reg and mul_b_reg respectively. Updates happen only when mul_en_in is active.
Partial Product Generation Submodule	Generates partial products by performing bitwise operations between the multiplicand (mul_a) and the bits of the multiplier (mul_b).
Partial Sum Calculation Submodule	Accumulates partial sums of the partial products in sum registers. This is done on each positive clock edge.
Final Product Calculation Submodule	Sums the partial sums to calculate the final product and stores it in the mul_out_reg.
Output Assignment Submodule	Assigns the final product (mul_out) based on mul_en_out. If the enable signal is active, the value from mul_out_reg is output.
Step 2: Expert Submodule Designs
1. Input Control Submodule
Description:
The mul_en_in signal is sampled on the positive edge of the clock and stored in a register. The output mul_en_out is derived from the most significant bit of mul_en_out_reg.

Verilog Code:

verilog

module input_control (
    input clk,
    input rst_n,
    input mul_en_in,
    output reg mul_en_out
);
    reg mul_en_out_reg;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            mul_en_out_reg <= 0;
            mul_en_out <= 0;
        end else begin
            mul_en_out_reg <= mul_en_in;
            mul_en_out <= mul_en_out_reg;
        end
    end
endmodule
Testbench:

verilog

module tb_input_control;
    reg clk;
    reg rst_n;
    reg mul_en_in;
    wire mul_en_out;

    input_control uut (
        .clk(clk),
        .rst_n(rst_n),
        .mul_en_in(mul_en_in),
        .mul_en_out(mul_en_out)
    );

    always #5 clk = ~clk; // Clock generation

    initial begin
        clk = 0;
        rst_n = 0;
        mul_en_in = 0;
        #10 rst_n = 1;
        #10 mul_en_in = 1;
        #10 mul_en_in = 0;
        #10 mul_en_in = 1;
        #10 $finish;
    end
endmodule
2. Input Register Submodule
Description:
Stores the multiplicand (mul_a) and multiplier (mul_b) in registers (mul_a_reg and mul_b_reg) only when mul_en_in is active.

Verilog Code:

verilog

module input_register (
    input clk,
    input rst_n,
    input mul_en_in,
    input [7:0] mul_a,
    input [7:0] mul_b,
    output reg [7:0] mul_a_reg,
    output reg [7:0] mul_b_reg
);

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            mul_a_reg <= 0;
            mul_b_reg <= 0;
        end else if (mul_en_in) begin
            mul_a_reg <= mul_a;
            mul_b_reg <= mul_b;
        end
    end
endmodule
Testbench:

verilog

module tb_input_register;
    reg clk;
    reg rst_n;
    reg mul_en_in;
    reg [7:0] mul_a;
    reg [7:0] mul_b;
    wire [7:0] mul_a_reg;
    wire [7:0] mul_b_reg;

    input_register uut (
        .clk(clk),
        .rst_n(rst_n),
        .mul_en_in(mul_en_in),
        .mul_a(mul_a),
        .mul_b(mul_b),
        .mul_a_reg(mul_a_reg),
        .mul_b_reg(mul_b_reg)
    );

    always #5 clk = ~clk;

    initial begin
        clk = 0;
        rst_n = 0;
        mul_en_in = 0;
        mul_a = 8'd10;
        mul_b = 8'd20;
        #10 rst_n = 1;
        #10 mul_en_in = 1;
        #10 mul_en_in = 0;
        #10 mul_en_in = 1;
        #10 $finish;
    end
endmodule
3. Partial Product Generation Submodule
Description:
Generates the partial products by performing bitwise operations between mul_a_reg and the individual bits of mul_b_reg.

Verilog Code:

verilog

module partial_product_gen (
    input [7:0] mul_a_reg,
    input [7:0] mul_b_reg,
    output [15:0] temp
);

    wire [7:0] pp [7:0]; // Partial products

    genvar i;
    generate
        for (i = 0; i < 8; i = i + 1) begin : gen_partial_product
            assign pp[i] = mul_a_reg & {8{mul_b_reg[i]}};
        end
    endgenerate

    assign temp = {pp[7], pp[6], pp[5], pp[4], pp[3], pp[2], pp[1], pp[0]};

endmodule
Testbench:

verilog

module tb_partial_product_gen;
    reg [7:0] mul_a_reg;
    reg [7:0] mul_b_reg;
    wire [15:0] temp;

    partial_product_gen uut (
        .mul_a_reg(mul_a_reg),
        .mul_b_reg(mul_b_reg),
        .temp(temp)
    );

    initial begin
        mul_a_reg = 8'd10;
        mul_b_reg = 8'd20;
        #10 mul_a_reg = 8'd15;
        mul_b_reg = 8'd25;
        #10 $finish;
    end
endmodule
4. Partial Sum Calculation Submodule
Description:
Accumulates the partial sums of the partial products in sum registers.

Verilog Code:

verilog

module partial_sum_calc (
    input clk,
    input rst_n,
    input [15:0] temp,
    output reg [15:0] sum
);

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            sum <= 0;
        end else begin
            sum <= sum + temp;
        end
    end
endmodule
Testbench:

verilog

module tb_partial_sum_calc;
    reg clk;
    reg rst_n;
    reg [15:0] temp;
    wire [15:0] sum;

    partial_sum_calc uut (
        .clk(clk),
        .rst_n(rst_n),
        .temp(temp),
        .sum(sum)
    );

    always #5 clk = ~clk;

    initial begin
        clk = 0;
        rst_n = 0;
        temp = 16'd30;
        #10 rst_n = 1;
        #10 temp = 16'd50;
        #10 temp = 16'd70;
        #10 $finish;
    end
endmodule
5. Final Product Calculation Submodule
Description:
Sums the partial sums to calculate the final product.

Verilog Code:

verilog

module final_product_calc (
    input clk,
    input rst_n,
    input [15:0] sum,
    output reg [15:0] mul_out_reg
);

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            mul_out_reg <= 0;
        end else begin
            mul_out_reg <= sum;
        end
    end
endmodule
Testbench:

verilog

module tb_final_product_calc;
    reg clk;
    reg rst_n;
    reg [15:0] sum;
    wire [15:0] mul_out_reg;

    final_product_calc uut (
        .clk(clk),
        .rst_n(rst_n),
        .sum(sum),
        .mul_out_reg(mul_out_reg)
    );

    always #5 clk = ~clk;

    initial begin
        clk = 0;
        rst_n = 0;
        sum = 16'd100;
        #10 rst_n = 1;
        #10 sum = 16'd200;
        #10 sum = 16'd300;
        #10 $finish;
    end
endmodule
6. Output Assignment Submodule
Description:
Assigns the final product (mul_out) based on mul_en_out.

Verilog Code:

verilog

module output_assign (
    input clk,
    input rst_n,
    input mul_en_out,
    input [15:0] mul_out_reg,
    output reg [15:0] mul_out
);

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            mul_out <= 0;
        end else if (mul_en_out) begin
            mul_out <= mul_out_reg;
        end else begin
            mul_out <= 0;
        end
    end
endmodule
Testbench:

verilog

module tb_output_assign;
    reg clk;
    reg rst_n;
    reg mul_en_out;
    reg [15:0] mul_out_reg;
    wire [15:0] mul_out;

    output_assign uut (
        .clk(clk),
        .rst_n(rst_n),
        .mul_en_out(mul_en_out),
        .mul_out_reg(mul_out_reg),
        .mul_out(mul_out)
    );

    always #5 clk = ~clk;

    initial begin
        clk = 0;
        rst_n = 0;
        mul_en_out = 0;
        mul_out_reg = 16'd100;
        #10 rst_n = 1;
        #10 mul_en_out = 1;
        #10 mul_en_out = 0;
        #10 $finish;
    end
endmodule
Step 3: Final Merged Design
The final merged design is a comprehensive integration of all submodules:

verilog

module multi_pipe_8bit (
    input clk,
    input rst_n,
    input mul_en_in,
    input [7:0] mul_a,
    input [7:0] mul_b,
    output mul_en_out,
    output [15:0] mul_out
);

    // Intermediate signals
    wire [7:0] mul_a_reg, mul_b_reg;
    wire [15:0] temp, sum, mul_out_reg;

    // Submodules
    input_control ic (
        .clk(clk),
        .rst_n(rst_n),
        .mul_en_in(mul_en_in),
        .mul_en_out(mul_en_out)
    );

    input_register ir (
        .clk(clk),
        .rst_n(rst_n),
        .mul_en_in(mul_en_in),
        .mul_a(mul_a),
        .mul_b(mul_b),
        .mul_a_reg(mul_a_reg),
        .mul_b_reg(mul_b_reg)
    );

    partial_product_gen pp_gen (
        .mul_a_reg(mul_a_reg),
        .mul_b_reg(mul_b_reg),
        .temp(temp)
    );

    partial_sum_calc ps_calc (
        .clk(clk),
        .rst_n(rst_n),
        .temp(temp),
        .sum(sum)
    );

    final_product_calc fp_calc (
        .clk(clk),
        .rst_n(rst_n),
        .sum(sum),
        .mul_out_reg(mul_out_reg)
    );

    output_assign oa (
        .clk(clk),
        .rst_n(rst_n),
        .mul_en_out(mul_en_out),
        .mul_out_reg(mul_out_reg),
        .mul_out(mul_out)
    );

endmodule
Step 4: Testing and Verification
Once you integrate all submodules, you can compile and run the testbenches provided for each individual submodule. After all submodules pass their respective testbenches, the final multi_pipe_8bit module can be tested for the entire pipeline, ensuring the product is calculated and output correctly.